Write-Host "`nLoad the branch (REVISION) and container image from the manifest, placed here by package.tsk`n"
PROPLD manifest.txt

ASSIGN $id = $("${SOLUTION}_${REVISION}").ToLower()
$env:WORK_SPACE = Split-Path -parent $workspace
Write-host $env:WORK_SPACE

# Copy any artefacts needed into specific images here

cd compose
..\imageBuild.ps1 ${id} ${BUILDNUMBER} ${containerImage}
cd ..

ASSIGN $env:TARGET_TAG = "${id}_runtime"
ASSIGN $env:TEST_TAG = "${id}_test"
.\dockerClean.ps1 $env:TARGET_TAG ${BUILDNUMBER}
.\dockerClean.ps1 $env:TEST_TAG ${BUILDNUMBER}

ASSIGN $composePersist = "${env:TEMP}\${id}"
MAKDIR $composePersist
VECOPY compose\docker-compose.yml $composePersist
cd $composePersist

Write-Host "List containers current state`n"
docker ps

Write-Host "`nCleanup from previously test`n"
docker-compose down --remove-orphans
docker-compose rm -f

Write-Host "Set the build number to use`n"
$env:TARGET_TAG = "${id}_runtime:${BUILDNUMBER}"
Write-Host "`$env:TARGET_TAG  = $env:TARGET_TAG"
docker-compose up -d runtime

Write-Host "Deploy to runtime (allow up to 2 minutes)`n"
ASSIGN $containerID = $(docker ps -aq --filter "ancestor=$env:TARGET_TAG")

# & $WORKSPACE\dockerLog.ps1 $containerID 'Watching for file changes with StatReloader'

$name,$discard,$ip = (docker inspect -f '{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${containerID}).split(' ')
docker logs $containerID
& ${workspace}\executeRetry.ps1 "curl.exe http://${ip}:8000/admin"
docker logs $containerID

ASSIGN $env:TEST_TAG = "${id}_test:${BUILDNUMBER}"
Write-Host "`$env:TEST_TAG = $env:TEST_TAG"
docker-compose up -d test

Write-Host "Execute tests (allow 5 minutes to complete)`n"
ASSIGN $containerID = $(docker ps -aq --filter "ancestor=$env:TEST_TAG")
& $WORKSPACE\dockerLog.ps1 $containerID 'Automated Test Execution completed successfully.' 300

Write-Host "`nTear down if not explicit variable to retain`n"
if ( $env:COMPOSE_KEEP ) { docker inspect -f '{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq) } else { docker-compose down; docker-compose rm -f }

cd $WORKSPACE

echo "Clean-up Transient Directory Created by imageBuild.sh"
REMOVE $env:TEMP/${SOLUTION}

Write-Host "`nConditional push when token is set, i.e. from CDAF only`n"
if ( $env:DOCKERHUB_TOKEN ) { & .\dockerPush.ps1 $env:TARGET_TAG cdaf/${SOLUTION} $remoteTagList } 
